"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Cervo_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cervo"));
const mongoose_1 = __importDefault(require("mongoose"));
class ServosController {
    async cambiarStatus({ request, response }) {
        const value = request.input('value');
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            const status = await Cervo_1.default.Cervos.find();
            const value = status[0];
            if (value['value'] == 1) {
                await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
                response = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": 0 } });
                return response;
            }
            else {
                await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
                response = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": 1 } });
                return response;
            }
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/servos?readPreference=primary&directConnection=true&ssl=false');
            response = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": value } });
            return response;
        }
    }
    async obtenerStatus({ response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Cervo_1.default.Cervos.find();
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Cervo_1.default.Cervos.find();
            return response;
        }
    }
}
exports.default = ServosController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vydm9zQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlcnZvc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxtRkFBc0M7QUFDdEMsd0RBQWdDO0FBQ2hDLE1BQXFCLGdCQUFnQjtJQUUxQixLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQztRQUV6QyxNQUFNLEtBQUssR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xDLElBQ0E7WUFDQSxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDZGQUE2RixDQUFDLENBQUE7WUFDckgsTUFBTSxNQUFNLEdBQUMsTUFBTSxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ3ZDLE1BQU0sS0FBSyxHQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNyQixJQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLEVBQ3BCO2dCQUNJLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsNkZBQTZGLENBQUMsQ0FBQTtnQkFDckgsUUFBUSxHQUFFLE1BQU0sZUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFBO2dCQUNwRSxPQUFPLFFBQVEsQ0FBQTthQUNsQjtpQkFFRDtnQkFDSSxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDZGQUE2RixDQUFDLENBQUE7Z0JBQ3JILFFBQVEsR0FBRSxNQUFNLGVBQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsSUFBSSxFQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQTtnQkFDcEUsT0FBTyxRQUFRLENBQUE7YUFDbEI7WUFDRCxPQUFPLFFBQVEsQ0FBQTtTQUNkO1FBQ0QsTUFDQTtZQUNJLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsMkZBQTJGLENBQUMsQ0FBQTtZQUNuSCxRQUFRLEdBQUUsTUFBTSxlQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLElBQUksRUFBQyxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsRUFBQyxDQUFDLENBQUE7WUFDeEUsT0FBTyxRQUFRLENBQUE7U0FDbEI7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFDLFFBQVEsRUFBQztRQUVqQyxJQUNBO1lBQ0ksTUFBTSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyw2RkFBNkYsQ0FBQyxDQUFBO1lBQ3JILFFBQVEsR0FBRSxNQUFNLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDcEMsT0FBTyxRQUFRLENBQUE7U0FDbEI7UUFDRCxNQUNBO1lBQ0ksTUFBTSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyw2RkFBNkYsQ0FBQyxDQUFBO1lBQ3JILFFBQVEsR0FBRSxNQUFNLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDcEMsT0FBTyxRQUFRLENBQUE7U0FDbEI7SUFDTCxDQUFDO0NBQ0o7QUE5Q0QsbUNBOENDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcclxuaW1wb3J0IENlcnZvcyBmcm9tIFwiQXBwL01vZGVscy9DZXJ2b1wiO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcnZvc0NvbnRyb2xsZXIgXHJcbntcclxuICAgIHB1YmxpYyBhc3luYyBjYW1iaWFyU3RhdHVzKHtyZXF1ZXN0LHJlc3BvbnNlfSlcclxuICAgIHtcclxuICAgICAgICBjb25zdCB2YWx1ZT1yZXF1ZXN0LmlucHV0KCd2YWx1ZScpXHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly8xOC4yMjAuMTIuNDoyNzAxNy9TZW5zb3Jlcz9yZWFkUHJlZmVyZW5jZT1wcmltYXJ5JmRpcmVjdENvbm5lY3Rpb249dHJ1ZSZzc2w9ZmFsc2UnKVxyXG4gICAgICAgIGNvbnN0IHN0YXR1cz1hd2FpdCBDZXJ2b3MuQ2Vydm9zLmZpbmQoKVxyXG4gICAgICAgIGNvbnN0IHZhbHVlPXN0YXR1c1swXVxyXG4gICAgICAgIGlmKHZhbHVlWyd2YWx1ZSddPT0xKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzE4LjIyMC4xMi40OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXHJcbiAgICAgICAgICAgIHJlc3BvbnNlPSBhd2FpdCBDZXJ2b3MuQ2Vydm9zLnVwZGF0ZU9uZSh7XCJpZFwiOjF9LHskc2V0OntcInZhbHVlXCI6MH19KVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzE4LjIyMC4xMi40OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXHJcbiAgICAgICAgICAgIHJlc3BvbnNlPSBhd2FpdCBDZXJ2b3MuQ2Vydm9zLnVwZGF0ZU9uZSh7XCJpZFwiOjF9LHskc2V0OntcInZhbHVlXCI6MX19KVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vMTguMjIwLjEyLjQ6MjcwMTcvc2Vydm9zP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXHJcbiAgICAgICAgICAgIHJlc3BvbnNlPSBhd2FpdCBDZXJ2b3MuQ2Vydm9zLnVwZGF0ZU9uZSh7XCJpZFwiOjF9LHskc2V0OntcInZhbHVlXCI6dmFsdWV9fSlcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIG9idGVuZXJTdGF0dXMoe3Jlc3BvbnNlfSlcclxuICAgIHtcclxuICAgICAgICB0cnlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly8xOC4yMjAuMTIuNDoyNzAxNy9TZW5zb3Jlcz9yZWFkUHJlZmVyZW5jZT1wcmltYXJ5JmRpcmVjdENvbm5lY3Rpb249dHJ1ZSZzc2w9ZmFsc2UnKVxyXG4gICAgICAgICAgICByZXNwb25zZT0gYXdhaXQgQ2Vydm9zLkNlcnZvcy5maW5kKClcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vMTguMjIwLjEyLjQ6MjcwMTcvU2Vuc29yZXM/cmVhZFByZWZlcmVuY2U9cHJpbWFyeSZkaXJlY3RDb25uZWN0aW9uPXRydWUmc3NsPWZhbHNlJylcclxuICAgICAgICAgICAgcmVzcG9uc2U9IGF3YWl0IENlcnZvcy5DZXJ2b3MuZmluZCgpXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=