"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async Login({ auth, request, response }) {
        const email = request.input('email');
        const password = request.input('password');
        try {
            const user = await User_1.default
                .query()
                .where('email', email)
                .where('password', password)
                .firstOrFail();
            const token = auth.use('api').generate(user);
            return token;
        }
        catch {
            return response.badRequest('Invalid credentials');
        }
    }
    async Logout({ auth, response }) {
        try {
            await auth.use('api').authenticate();
            await auth.use('api').revoke();
            return true;
        }
        catch {
            return response.badRequest('No existe el usuario');
        }
    }
    async VerificarToken({ auth }) {
        try {
            await auth.use('api').authenticate();
            return true;
        }
        catch {
            return false;
        }
    }
    async validarrol({ auth, response }) {
        try {
            await auth.use('api').authenticate();
            const rol = auth.use('api').user.$attributes.rol;
            if (rol == 1) {
                return true;
            }
            else {
                return false;
            }
        }
        catch {
            return response.badRequest('El usuario no existe');
        }
    }
    async getUser({ auth }) {
        await auth.use('api').authenticate();
        const user = auth.use('api').user.$attributes.id;
        return user;
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGlGQUFrQztBQUNsQyxNQUFxQixjQUFjO0lBRXpCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQztRQUVyQyxNQUFNLEtBQUssR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xDLE1BQU0sUUFBUSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDeEMsSUFBRztZQUNDLE1BQU0sSUFBSSxHQUFDLE1BQU0sY0FBSTtpQkFDcEIsS0FBSyxFQUFFO2lCQUNQLEtBQUssQ0FBQyxPQUFPLEVBQUMsS0FBSyxDQUFDO2lCQUNwQixLQUFLLENBQUMsVUFBVSxFQUFDLFFBQVEsQ0FBQztpQkFDMUIsV0FBVyxFQUFFLENBQUE7WUFDZCxNQUFNLEtBQUssR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUMxQyxPQUFPLEtBQUssQ0FBQTtTQUNmO1FBQUEsTUFDRDtZQUNJLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1NBQ3BEO0lBQ0wsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDO1FBRS9CLElBQ0E7WUFDSSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7WUFDcEMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1lBQzlCLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7UUFBQSxNQUFLO1lBQ0YsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUE7U0FDckQ7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFDLElBQUksRUFBQztRQUU5QixJQUNBO1lBQ0ksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQ3BDLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7UUFBQSxNQUNEO1lBQ0ksT0FBTyxLQUFLLENBQUE7U0FDZjtJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUMsSUFBSSxFQUFDLFFBQVEsRUFBQztRQUVuQyxJQUNBO1lBQ0ksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQ3BDLE1BQU0sR0FBRyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUE7WUFDOUMsSUFBRyxHQUFHLElBQUUsQ0FBQyxFQUFDO2dCQUNQLE9BQU8sSUFBSSxDQUFBO2FBQ2I7aUJBQ0c7Z0JBQ0EsT0FBTyxLQUFLLENBQUE7YUFDZjtTQUNKO1FBQUEsTUFDRDtZQUNJLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO1NBQ3JEO0lBQ0wsQ0FBQztJQUNNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQyxJQUFJLEVBQUM7UUFFdkIsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ3BDLE1BQU0sSUFBSSxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUE7UUFDOUMsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0NBQ0o7QUFoRUQsaUNBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhDb250cm9sbGVyIFxue1xuXHQgIHB1YmxpYyBhc3luYyBMb2dpbih7YXV0aCxyZXF1ZXN0LHJlc3BvbnNlfSlcbiAgICB7XG4gICAgICAgIGNvbnN0IGVtYWlsPXJlcXVlc3QuaW5wdXQoJ2VtYWlsJylcbiAgICAgICAgY29uc3QgcGFzc3dvcmQ9cmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBjb25zdCB1c2VyPWF3YWl0IFVzZXJcbiAgICAgICAgICAgIC5xdWVyeSgpXG4gICAgICAgICAgICAud2hlcmUoJ2VtYWlsJyxlbWFpbClcbiAgICAgICAgICAgIC53aGVyZSgncGFzc3dvcmQnLHBhc3N3b3JkKVxuICAgICAgICAgICAgLmZpcnN0T3JGYWlsKClcbiAgICAgICAgICAgIGNvbnN0IHRva2VuPWF1dGgudXNlKCdhcGknKS5nZW5lcmF0ZSh1c2VyKVxuICAgICAgICAgICAgcmV0dXJuIHRva2VuXG4gICAgICAgIH1jYXRjaFxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCgnSW52YWxpZCBjcmVkZW50aWFscycpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIExvZ291dCh7YXV0aCxyZXNwb25zZX0pXG4gICAge1xuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgICAgICBhd2FpdCBhdXRoLnVzZSgnYXBpJykucmV2b2tlKClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1jYXRjaHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KCdObyBleGlzdGUgZWwgdXN1YXJpbycpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIFZlcmlmaWNhclRva2VuKHthdXRofSlcbiAgICB7XG4gICAgICAgIHRyeVxuICAgICAgICB7XG4gICAgICAgICAgICBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXV0aGVudGljYXRlKClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1jYXRjaFxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhcnJvbCh7YXV0aCxyZXNwb25zZX0pXG4gICAge1xuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgICAgICBjb25zdCByb2w9YXV0aC51c2UoJ2FwaScpLnVzZXIuJGF0dHJpYnV0ZXMucm9sXG4gICAgICAgICAgICBpZihyb2w9PTEpe1xuICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1jYXRjaFxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCgnRWwgdXN1YXJpbyBubyBleGlzdGUnKVxuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBnZXRVc2VyKHthdXRofSlcbiAgICB7XG4gICAgICAgIGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKVxuICAgICAgICBjb25zdCB1c2VyPWF1dGgudXNlKCdhcGknKS51c2VyLiRhdHRyaWJ1dGVzLmlkXG4gICAgICAgIHJldHVybiB1c2VyXG4gICAgfVxufVxuIl19