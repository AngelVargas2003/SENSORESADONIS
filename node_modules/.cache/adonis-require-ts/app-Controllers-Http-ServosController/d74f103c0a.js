"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Cervo_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cervo"));
const mongoose_1 = __importDefault(require("mongoose"));
class ServosController {
    async cambiarStatus({ request, response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Cervo_1.default.Cervos.find();
            let valueres = response[0];
            let value = valueres['value'];
            if (value == 1) {
                let respuest = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": 0 } });
                return respuest;
            }
            else {
                let respuest = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": 1 } });
                return respuest;
            }
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.14.126.88:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Cervo_1.default.Cervos.find();
            let valueres = response[0];
            let value = valueres['value'];
            if (value == 1) {
                let respuest = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": 0 } });
                return respuest;
            }
            else {
                let respuest = await Cervo_1.default.Cervos.updateOne({ "id": 1 }, { $set: { "value": 1 } });
                return respuest;
            }
        }
    }
    async obtenerStatus({ response }) {
        try {
            mongoose_1.default.connect('mongodb://3.14.126.88:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
        }
        catch {
            mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
        }
        response = await Cervo_1.default.Cervos.find();
        const status = response[0];
        const value = status['value'];
        return value;
    }
}
exports.default = ServosController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vydm9zQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlcnZvc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxtRkFBc0M7QUFDdEMsd0RBQWdDO0FBQ2hDLE1BQXFCLGdCQUFnQjtJQUUxQixLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQztRQUV6QyxJQUNBO1lBQ0ksTUFBTSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyw2RkFBNkYsQ0FBQyxDQUFBO1lBQ3JILFFBQVEsR0FBQyxNQUFNLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDbkMsSUFBSSxRQUFRLEdBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3hCLElBQUksS0FBSyxHQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMzQixJQUFHLEtBQUssSUFBRSxDQUFDLEVBQ1g7Z0JBQ0ksSUFBSSxRQUFRLEdBQUUsTUFBTSxlQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLElBQUksRUFBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLENBQUE7Z0JBQ3hFLE9BQU8sUUFBUSxDQUFBO2FBQ2xCO2lCQUVEO2dCQUNJLElBQUksUUFBUSxHQUFFLE1BQU0sZUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFBO2dCQUN4RSxPQUFPLFFBQVEsQ0FBQTthQUNsQjtTQUNKO1FBQ0QsTUFDQTtZQUNJLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsNkZBQTZGLENBQUMsQ0FBQTtZQUNySCxRQUFRLEdBQUMsTUFBTSxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ25DLElBQUksUUFBUSxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN4QixJQUFJLEtBQUssR0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDM0IsSUFBRyxLQUFLLElBQUUsQ0FBQyxFQUNYO2dCQUNJLElBQUksUUFBUSxHQUFFLE1BQU0sZUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFBO2dCQUN4RSxPQUFPLFFBQVEsQ0FBQTthQUNsQjtpQkFFRDtnQkFDSSxJQUFJLFFBQVEsR0FBRSxNQUFNLGVBQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsSUFBSSxFQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQTtnQkFDeEUsT0FBTyxRQUFRLENBQUE7YUFDbEI7U0FDSjtJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsUUFBUSxFQUFDO1FBRWpDLElBQ0E7WUFDSSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyw2RkFBNkYsQ0FBQyxDQUFBO1NBQ2xIO1FBQ0QsTUFDQTtZQUNLLGtCQUFRLENBQUMsT0FBTyxDQUFDLDZGQUE2RixDQUFDLENBQUE7U0FDbkg7UUFDRCxRQUFRLEdBQUUsTUFBTSxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3BDLE1BQU0sTUFBTSxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN4QixNQUFNLEtBQUssR0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDM0IsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztDQUVKO0FBdkRELG1DQXVEQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXHJcbmltcG9ydCBDZXJ2b3MgZnJvbSBcIkFwcC9Nb2RlbHMvQ2Vydm9cIjtcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2b3NDb250cm9sbGVyIFxyXG57XHJcbiAgICBwdWJsaWMgYXN5bmMgY2FtYmlhclN0YXR1cyh7cmVxdWVzdCxyZXNwb25zZX0pXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vMTguMjIwLjEyLjQ6MjcwMTcvU2Vuc29yZXM/cmVhZFByZWZlcmVuY2U9cHJpbWFyeSZkaXJlY3RDb25uZWN0aW9uPXRydWUmc3NsPWZhbHNlJylcclxuICAgICAgICAgICAgcmVzcG9uc2U9YXdhaXQgQ2Vydm9zLkNlcnZvcy5maW5kKClcclxuICAgICAgICAgICAgbGV0IHZhbHVlcmVzPXJlc3BvbnNlWzBdXHJcbiAgICAgICAgICAgIGxldCB2YWx1ZT12YWx1ZXJlc1sndmFsdWUnXVxyXG4gICAgICAgICAgICBpZih2YWx1ZT09MSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3B1ZXN0PSBhd2FpdCBDZXJ2b3MuQ2Vydm9zLnVwZGF0ZU9uZSh7XCJpZFwiOjF9LHskc2V0OntcInZhbHVlXCI6MH19KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3B1ZXN0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzcHVlc3Q9IGF3YWl0IENlcnZvcy5DZXJ2b3MudXBkYXRlT25lKHtcImlkXCI6MX0seyRzZXQ6e1widmFsdWVcIjoxfX0pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcHVlc3RcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzMuMTQuMTI2Ljg4OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXHJcbiAgICAgICAgICAgIHJlc3BvbnNlPWF3YWl0IENlcnZvcy5DZXJ2b3MuZmluZCgpXHJcbiAgICAgICAgICAgIGxldCB2YWx1ZXJlcz1yZXNwb25zZVswXVxyXG4gICAgICAgICAgICBsZXQgdmFsdWU9dmFsdWVyZXNbJ3ZhbHVlJ11cclxuICAgICAgICAgICAgaWYodmFsdWU9PTEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXNwdWVzdD0gYXdhaXQgQ2Vydm9zLkNlcnZvcy51cGRhdGVPbmUoe1wiaWRcIjoxfSx7JHNldDp7XCJ2YWx1ZVwiOjB9fSlcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwdWVzdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3B1ZXN0PSBhd2FpdCBDZXJ2b3MuQ2Vydm9zLnVwZGF0ZU9uZSh7XCJpZFwiOjF9LHskc2V0OntcInZhbHVlXCI6MX19KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3B1ZXN0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXN5bmMgb2J0ZW5lclN0YXR1cyh7cmVzcG9uc2V9KVxyXG4gICAge1xyXG4gICAgICAgIHRyeVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzMuMTQuMTI2Ljg4OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzE4LjIyMC4xMi40OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3BvbnNlPSBhd2FpdCBDZXJ2b3MuQ2Vydm9zLmZpbmQoKVxyXG4gICAgICAgIGNvbnN0IHN0YXR1cz1yZXNwb25zZVswXVxyXG4gICAgICAgIGNvbnN0IHZhbHVlPXN0YXR1c1sndmFsdWUnXVxyXG4gICAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuIl19