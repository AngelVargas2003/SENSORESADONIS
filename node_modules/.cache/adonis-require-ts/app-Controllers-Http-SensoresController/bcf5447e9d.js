"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const Sensor_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Sensor"));
const Valore_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Valore"));
class SensoresController {
    async guardarMongo({ request, response }) {
        const trigger = request.input('trigger');
        const echo = request.input('echo');
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = new Sensor_1.default.SensorModelo({
                "id": request.input('id'),
                "pin": [{
                        "trigger": trigger,
                        "echo": echo
                    }],
                "tipo": request.input('tipo'),
                "clave": request.input('clave'),
            });
            response.save();
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = new Sensor_1.default.SensorModelo({
                "id": request.input('id'),
                "pin": [
                    trigger,
                    echo
                ],
                "tipo": request.input('tipo'),
                "clave": request.input('clave'),
            });
            response.save();
            return response;
        }
    }
    async verSensor({ params, response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find({ "id": params.id });
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find({ "id": params.id });
            return response;
        }
    }
    async verSensores({ response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find();
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find();
            return response;
        }
    }
    async modificar({ request, response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            const id = request.input('id');
            response = await Sensor_1.default.SensorModelo.updateOne({ "id": id }, { $set: { "pin": { "trigger": request.input('trigger'), "echo": request.input('echo') }, "tipo": request.input('tipo'), "clave": request.input('clave') } });
            return response;
        }
        catch {
        }
    }
    async guardarMedicion({ request, response }) {
        const id = request.input('id');
        const clave = request.input('clave');
        const fecha = request.input('fecha');
        const hora = request.input('hora');
        const valor = request.input('valor');
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = new Valore_1.default.Valore({
                "id": id,
                "fecha": fecha,
                "clave": clave,
                "hora": hora,
                "valor": valor
            });
            response.save();
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = new Valore_1.default.Valore({
                "id": id,
                "fecha": fecha,
                "clave": clave,
                "hora": hora,
                "valor": valor
            });
            response.save();
            return response;
        }
    }
}
exports.default = SensoresController;
//# sourceMappingURL=data:application/json;base64,