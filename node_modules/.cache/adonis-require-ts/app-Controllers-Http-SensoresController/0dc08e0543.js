"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const Sensor_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Sensor"));
class SensoresController {
    async guardarMongo({ request, response }) {
        const trigger = request.input('trigger');
        const echo = request.input('echo');
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = new Sensor_1.default.SensorModelo({
                "id": request.input('id'),
                "pin": [
                    trigger,
                    echo
                ],
                "tipo": request.input('tipo'),
                "clave": request.input('clave'),
            });
            response.save();
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = new Sensor_1.default.SensorModelo({
                "id": request.input('id'),
                "pin": [
                    trigger,
                    echo
                ],
                "tipo": request.input('tipo'),
                "clave": request.input('clave'),
            });
            response.save();
            return response;
        }
    }
    async verSensor({ params, response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find({ "id": params.id });
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find({ "id": params.id });
            return response;
        }
    }
    async verSensores({ response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find();
            return response;
        }
        catch {
            await mongoose_1.default.connect('mongodb://3.145.210.35:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            response = await Sensor_1.default.SensorModelo.find();
            return response;
        }
    }
    async modificar({ request, response }) {
        try {
            await mongoose_1.default.connect('mongodb://18.220.12.4:27017/Sensores?readPreference=primary&directConnection=true&ssl=false');
            const id = request.input('id');
            response = await Sensor_1.default.SensorModelo.updateOne({ "id": id }, { $pull: { "pin": { $gte: 1 } } }, { $push: { "pin": [request.input('trigger'), request.input('echo')] } });
            return response;
        }
        catch {
        }
    }
}
exports.default = SensoresController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc29yZXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2Vuc29yZXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esd0RBQStCO0FBQy9CLHFGQUE0QztBQUM1QyxNQUFxQixrQkFBa0I7SUFFeEIsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUM7UUFFNUMsTUFBTSxPQUFPLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN0QyxNQUFNLElBQUksR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2hDLElBQ0E7WUFDSSxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDZGQUE2RixDQUFDLENBQUE7WUFDcEgsUUFBUSxHQUFDLElBQUksZ0JBQVksQ0FBQyxZQUFZLENBQUM7Z0JBQ3BDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDekIsS0FBSyxFQUFFO29CQUNILE9BQU87b0JBQ1AsSUFBSTtpQkFDUDtnQkFDRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUNsQyxDQUFDLENBQUE7WUFDRixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDZixPQUFPLFFBQVEsQ0FBQTtTQUNsQjtRQUNELE1BQ0E7WUFDSSxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDhGQUE4RixDQUFDLENBQUE7WUFDckgsUUFBUSxHQUFDLElBQUksZ0JBQVksQ0FBQyxZQUFZLENBQUM7Z0JBQ3BDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDekIsS0FBSyxFQUFFO29CQUNILE9BQU87b0JBQ1AsSUFBSTtpQkFDUDtnQkFDRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUNsQyxDQUFDLENBQUE7WUFDRixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDZixPQUFPLFFBQVEsQ0FBQTtTQUNsQjtJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQztRQUVwQyxJQUNBO1lBQ0ksTUFBTSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyw2RkFBNkYsQ0FBQyxDQUFBO1lBQ3JILFFBQVEsR0FBQyxNQUFNLGdCQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBQyxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQTtZQUMvRCxPQUFPLFFBQVEsQ0FBQTtTQUNsQjtRQUNELE1BQ0E7WUFDSSxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDhGQUE4RixDQUFDLENBQUE7WUFDdEgsUUFBUSxHQUFDLE1BQU0sZ0JBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFBO1lBQy9ELE9BQU8sUUFBUSxDQUFBO1NBQ2xCO0lBQ0wsQ0FBQztJQUNNLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBQyxRQUFRLEVBQUM7UUFFL0IsSUFDQTtZQUNJLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsNkZBQTZGLENBQUMsQ0FBQTtZQUNySCxRQUFRLEdBQUMsTUFBTSxnQkFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUMvQyxPQUFPLFFBQVEsQ0FBQTtTQUNsQjtRQUNELE1BQ0E7WUFDSSxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDhGQUE4RixDQUFDLENBQUE7WUFDdEgsUUFBUSxHQUFDLE1BQU0sZ0JBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDL0MsT0FBTyxRQUFRLENBQUE7U0FDbEI7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUM7UUFFckMsSUFDQTtZQUNJLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsNkZBQTZGLENBQUMsQ0FBQTtZQUNySCxNQUFNLEVBQUUsR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzVCLFFBQVEsR0FBRSxNQUFNLGdCQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLEtBQUssRUFBQyxFQUFDLEtBQUssRUFBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLEVBQUMsRUFBQyxLQUFLLEVBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQTtZQUN4SixPQUFPLFFBQVEsQ0FBQTtTQUNsQjtRQUNELE1BQ0E7U0FNQztJQUNMLENBQUM7Q0FDSjtBQXJGRCxxQ0FxRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiXG5pbXBvcnQgU2Vuc29yTW9kZWxvIGZyb20gXCJBcHAvTW9kZWxzL1NlbnNvclwiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5zb3Jlc0NvbnRyb2xsZXIgXG57XG4gICAgICAgIHB1YmxpYyBhc3luYyBndWFyZGFyTW9uZ28oe3JlcXVlc3QscmVzcG9uc2V9KVxuICAgIHsgICBcbiAgICAgICAgY29uc3QgdHJpZ2dlcj1yZXF1ZXN0LmlucHV0KCd0cmlnZ2VyJylcbiAgICAgICAgY29uc3QgZWNobz1yZXF1ZXN0LmlucHV0KCdlY2hvJykgIFxuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzE4LjIyMC4xMi40OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpIFxuICAgICAgICAgICAgIHJlc3BvbnNlPW5ldyBTZW5zb3JNb2RlbG8uU2Vuc29yTW9kZWxvKHtcbiAgICAgICAgICAgICAgICBcImlkXCI6IHJlcXVlc3QuaW5wdXQoJ2lkJyksXG4gICAgICAgICAgICAgICAgXCJwaW5cIjogW1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyLFxuICAgICAgICAgICAgICAgICAgICBlY2hvXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcInRpcG9cIjogcmVxdWVzdC5pbnB1dCgndGlwbycpLFxuICAgICAgICAgICAgICAgIFwiY2xhdmVcIjogcmVxdWVzdC5pbnB1dCgnY2xhdmUnKSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXNwb25zZS5zYXZlKClcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoXG4gICAgICAgIHtcbiAgICAgICAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly8zLjE0NS4yMTAuMzU6MjcwMTcvU2Vuc29yZXM/cmVhZFByZWZlcmVuY2U9cHJpbWFyeSZkaXJlY3RDb25uZWN0aW9uPXRydWUmc3NsPWZhbHNlJykgXG4gICAgICAgICAgICAgcmVzcG9uc2U9bmV3IFNlbnNvck1vZGVsby5TZW5zb3JNb2RlbG8oe1xuICAgICAgICAgICAgICAgIFwiaWRcIjogcmVxdWVzdC5pbnB1dCgnaWQnKSxcbiAgICAgICAgICAgICAgICBcInBpblwiOiBbXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIsXG4gICAgICAgICAgICAgICAgICAgIGVjaG9cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwidGlwb1wiOiByZXF1ZXN0LmlucHV0KCd0aXBvJyksXG4gICAgICAgICAgICAgICAgXCJjbGF2ZVwiOiByZXF1ZXN0LmlucHV0KCdjbGF2ZScpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJlc3BvbnNlLnNhdmUoKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIHZlclNlbnNvcih7cGFyYW1zLHJlc3BvbnNlfSlcbiAgICB7XG4gICAgICAgIHRyeVxuICAgICAgICB7XG4gICAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vMTguMjIwLjEyLjQ6MjcwMTcvU2Vuc29yZXM/cmVhZFByZWZlcmVuY2U9cHJpbWFyeSZkaXJlY3RDb25uZWN0aW9uPXRydWUmc3NsPWZhbHNlJylcbiAgICAgICAgICAgIHJlc3BvbnNlPWF3YWl0IFNlbnNvck1vZGVsby5TZW5zb3JNb2RlbG8uZmluZCh7XCJpZFwiOnBhcmFtcy5pZH0pXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgfVxuICAgICAgICBjYXRjaFxuICAgICAgICB7XG4gICAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vMy4xNDUuMjEwLjM1OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXG4gICAgICAgICAgICByZXNwb25zZT1hd2FpdCBTZW5zb3JNb2RlbG8uU2Vuc29yTW9kZWxvLmZpbmQoe1wiaWRcIjpwYXJhbXMuaWR9KVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIHZlclNlbnNvcmVzKHtyZXNwb25zZX0pXG4gICAge1xuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzE4LjIyMC4xMi40OjI3MDE3L1NlbnNvcmVzP3JlYWRQcmVmZXJlbmNlPXByaW1hcnkmZGlyZWN0Q29ubmVjdGlvbj10cnVlJnNzbD1mYWxzZScpXG4gICAgICAgICAgICByZXNwb25zZT1hd2FpdCBTZW5zb3JNb2RlbG8uU2Vuc29yTW9kZWxvLmZpbmQoKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2hcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzMuMTQ1LjIxMC4zNToyNzAxNy9TZW5zb3Jlcz9yZWFkUHJlZmVyZW5jZT1wcmltYXJ5JmRpcmVjdENvbm5lY3Rpb249dHJ1ZSZzc2w9ZmFsc2UnKVxuICAgICAgICAgICAgcmVzcG9uc2U9YXdhaXQgU2Vuc29yTW9kZWxvLlNlbnNvck1vZGVsby5maW5kKClcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBtb2RpZmljYXIoe3JlcXVlc3QscmVzcG9uc2V9KVxuICAgIHtcbiAgICAgICAgdHJ5XG4gICAgICAgIHtcbiAgICAgICAgICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly8xOC4yMjAuMTIuNDoyNzAxNy9TZW5zb3Jlcz9yZWFkUHJlZmVyZW5jZT1wcmltYXJ5JmRpcmVjdENvbm5lY3Rpb249dHJ1ZSZzc2w9ZmFsc2UnKVxuICAgICAgICAgICAgY29uc3QgaWQ9cmVxdWVzdC5pbnB1dCgnaWQnKVxuICAgICAgICAgICAgcmVzcG9uc2U9IGF3YWl0IFNlbnNvck1vZGVsby5TZW5zb3JNb2RlbG8udXBkYXRlT25lKHtcImlkXCI6aWR9LHskcHVsbDp7XCJwaW5cIjp7JGd0ZToxfX19LHskcHVzaDp7XCJwaW5cIjpbcmVxdWVzdC5pbnB1dCgndHJpZ2dlcicpLHJlcXVlc3QuaW5wdXQoJ2VjaG8nKV19fSlcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoXG4gICAgICAgIHtcbi8vICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovLzMuMTQ1LjIxMC4zNToyNzAxNy9TZW5zb3Jlcz9yZWFkUHJlZmVyZW5jZT1wcmltYXJ5JmRpcmVjdENvbm5lY3Rpb249dHJ1ZSZzc2w9ZmFsc2UnKVxuLy8gICAgICAgICAgICBjb25zdCBpZD1yZXF1ZXN0LmlucHV0KCdpZCcpXG4vLyAgICAgICAgICAgIG1vZD0gYXdhaXQgU2Vuc29yTW9kZWxvLlNlbnNvck1vZGVsby51cGRhdGVPbmUoe1wiaWRcIjppZH0seyRwdWxsOntcInBpblwiOnskZ3RlOjF9fX0pXG4vLyAgICAgICAgICAgIHJlc3BvbnNlPSBhd2FpdCBTZW5zb3JNb2RlbG8uU2Vuc29yTW9kZWxvLnVwZGF0ZU9uZSh7XCJpZFwiOmlkfSx7JHB1c2g6e1wicGluXCI6W3JlcXVlc3QuaW5wdXQoJ3RyaWdnZXInKSxyZXF1ZXN0LmlucHV0KCdlY2hvJyldfX0pXG4vLyAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICB9XG4gICAgfVxufSBcbiJdfQ==